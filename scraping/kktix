from time import sleep
from bs4 import BeautifulSoup
from selenium import webdriver
import random
from selenium.webdriver.common.by import By
from selenium.common.exceptions import NoSuchElementException, StaleElementReferenceException

option = webdriver.ChromeOptions() # 設定 chromedriver
#option.add_argument('--headless') # 無頭模式，開發完成之後再使用，可以完全背景執行，有機會變快。但無頭模式在某些網站會不能爬。
option.add_experimental_option('excludeSwitches', ['enable-automation']) # 開發者模式。可以避開某些防爬機制，有開有保佑
driver = webdriver.Chrome(options=option) # 啟動 chromedriver
driver.maximize_window() # 視窗放到最大。有些網站的版面會隨視窗大小改變，在沒有放到最大的情況下有可能定位正確但戳到其他地方，所以通常會放大

url = 'https://kktix.com/events?utf8=%E2%9C%93&search=&max_price=&min_price=&start_at=&end_at=&event_tag_ids_in=1' # 指定網址
driver.get(url) # 進入指定網址
driver.implicitly_wait(5) # 等待伺服器反應最多 5 秒，如果在時間到之前反應就提早結束等待


page_number = 1
all_events = 0

while True:

    processed_event = 1
    events = driver.find_elements(By.CSS_SELECTOR, 'span.fake-btn.pull-right')

    #當前頁面活動未處理完時
    while processed_event <= len(events):

        #找到此頁所有活動(定位)
        events = driver.find_elements(By.CSS_SELECTOR, 'span.fake-btn.pull-right')

        #遍歷活動頁面(從未處理開始)
        for event_index in range(processed_event - 1, len(events)):
            #點選活動頁
            try:
                event = events[event_index]
                event.click()
                sleep(1 + random.random())
                print(f'Page {page_number}  / event {processed_event}')

                #若有大標題則抓取資料
                try:
                    title = driver.find_element(By.CSS_SELECTOR, 'body > div.outer-wrapper > div.content-wrapper > div > div.header > div > h1')
                    print(f'event: {title.text}')

                    # 表演者 (有點難抓 格式不統一，暫抓標題第一個字串)
                    performer = title.text.split()[0]
                    print(f'performer: {performer}')

                    #定位日期
                    date = driver.find_elements('css selector', 'body > div.outer-wrapper > div.content-wrapper > div > div.event-info > ul > li:nth-child(1) > span > span:nth-child(2)')
                    for date_element in date:
                        dates = date_element.text
                    #處理日期格式
                    raw_date = dates.split('(周')
                    date = raw_date[0]
                    weekday = '(' + raw_date[1].split(') ')[0] + ')'
                    time = raw_date[1].split(') ')[1].split('(')[0]
                    formatted_date = f'{date} {weekday} {time}'
                    print(f'date: {formatted_date}')

                    #定位地點與地址
                    location = driver.find_elements('css selector', 'body > div.outer-wrapper > div.content-wrapper > div > div.event-info > ul > li:nth-child(2) > span')
                    for location_element in location:
                        raw_location = location_element.text
                        if '/' in raw_location:
                            #分開地點與地址
                            location = raw_location.split(' / ')[0]
                            address = raw_location.split(' / ')[1]
                            print(f'location: {location}')
                            print(f'address: {address}')
                        else:
                            print(f'location: {raw_location}')
                
                    #網址
                    current_url = driver.current_url
                    print(f'link: {current_url}')

                    #圖片
                    image = driver.find_element('css selector', 'body > div.outer-wrapper > div.content-wrapper > div > div.og-banner > img')
                    image_url = image.get_attribute('src')
                    print(f'image: {image_url}')
                    print()

                #若無大標題則跳過頁面
                except NoSuchElementException:
                    print('skip this page')
                    print()

                #處理完活動頁則跳回上頁，處理完活動數+1
                finally:
                    driver.back()
                    processed_event += 1
                    all_events += 1

            #元素引用失效異常(可能由於頁面加載不完全?)，需重新定位元素
            except StaleElementReferenceException:
                driver.back()
                break
                
    #遍歷完12個活動 進入下一頁
    page_number += 1
    driver.get(f'https://kktix.com/events?end_at=&event_tag_ids_in=1&max_price=&min_price=&page={page_number}&search=&start_at=')
    sleep(3)  # 給予頁面足夠的時間加載
    
    events = driver.find_elements(By.CSS_SELECTOR, 'span.fake-btn.pull-right')
    if events:
        pass
    else:
        print(f'(已完成爬蟲，總活動數: {all_events} 個)')
        break

driver.close()
